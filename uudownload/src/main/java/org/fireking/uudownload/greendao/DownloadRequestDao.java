package org.fireking.uudownload.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.fireking.uudownload.DownloadRequest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "download_entity".
*/
public class DownloadRequestDao extends AbstractDao<DownloadRequest, Long> {

    public static final String TABLENAME = "download_entity";

    /**
     * Properties of entity DownloadRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "download_id");
        public final static Property DownloadUrl = new Property(1, String.class, "downloadUrl", false, "download_url");
        public final static Property Md5 = new Property(2, String.class, "md5", false, "md5");
        public final static Property HashCode = new Property(3, int.class, "hashCode", false, "hash_code");
        public final static Property State = new Property(4, int.class, "state", false, "state");
        public final static Property ContentLength = new Property(5, long.class, "contentLength", false, "content_length");
        public final static Property CurrentLength = new Property(6, long.class, "currentLength", false, "current_length");
        public final static Property StoreDirection = new Property(7, String.class, "storeDirection", false, "store_direction");
        public final static Property StoreFileName = new Property(8, String.class, "storeFileName", false, "store_file_name");
    }


    public DownloadRequestDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadRequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"download_entity\" (" + //
                "\"download_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"download_url\" TEXT," + // 1: downloadUrl
                "\"md5\" TEXT," + // 2: md5
                "\"hash_code\" INTEGER NOT NULL ," + // 3: hashCode
                "\"state\" INTEGER NOT NULL ," + // 4: state
                "\"content_length\" INTEGER NOT NULL ," + // 5: contentLength
                "\"current_length\" INTEGER NOT NULL ," + // 6: currentLength
                "\"store_direction\" TEXT," + // 7: storeDirection
                "\"store_file_name\" TEXT);"); // 8: storeFileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"download_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadRequest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(3, md5);
        }
        stmt.bindLong(4, entity.getHashCode());
        stmt.bindLong(5, entity.getState());
        stmt.bindLong(6, entity.getContentLength());
        stmt.bindLong(7, entity.getCurrentLength());
 
        String storeDirection = entity.getStoreDirection();
        if (storeDirection != null) {
            stmt.bindString(8, storeDirection);
        }
 
        String storeFileName = entity.getStoreFileName();
        if (storeFileName != null) {
            stmt.bindString(9, storeFileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadRequest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(3, md5);
        }
        stmt.bindLong(4, entity.getHashCode());
        stmt.bindLong(5, entity.getState());
        stmt.bindLong(6, entity.getContentLength());
        stmt.bindLong(7, entity.getCurrentLength());
 
        String storeDirection = entity.getStoreDirection();
        if (storeDirection != null) {
            stmt.bindString(8, storeDirection);
        }
 
        String storeFileName = entity.getStoreFileName();
        if (storeFileName != null) {
            stmt.bindString(9, storeFileName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadRequest readEntity(Cursor cursor, int offset) {
        DownloadRequest entity = new DownloadRequest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // md5
            cursor.getInt(offset + 3), // hashCode
            cursor.getInt(offset + 4), // state
            cursor.getLong(offset + 5), // contentLength
            cursor.getLong(offset + 6), // currentLength
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // storeDirection
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // storeFileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadRequest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMd5(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHashCode(cursor.getInt(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setContentLength(cursor.getLong(offset + 5));
        entity.setCurrentLength(cursor.getLong(offset + 6));
        entity.setStoreDirection(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStoreFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadRequest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadRequest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadRequest entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
